Index: DataAnalyzing200112.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\nimport math\r\n\r\n# STEMA考试列表\r\n# 第1次 2019 12 15\r\n# 第2次 2020 01 12\r\n\r\n# 设置考试日期字典\r\nfrom numpy.core._multiarray_umath import ndarray\r\nfrom pandas import DataFrame\r\n\r\ndateTest = {1 : \"2019-12-15\", 2 : \"2020-01-12\"}\r\n\r\n# 设置考试数据分析基础文件的文件名\r\nfileAnalysisInput = {1 : \"191215-5-分析基础.xlsx\", 2 : \"200112-5-分析基础.xlsx\"}\r\ndfAnalysisInput = list()\r\nfor i in range(len(fileAnalysisInput)) :\r\n    print(\"Program Info ->\", \"考试序号\", i, \"考试日期\", dateTest[i + 1], \"文件名称\", fileAnalysisInput[i + 1])\r\n    dfAnalysisInput.append(pd.read_excel(fileAnalysisInput[i + 1], \"分析基础\", index_col=\"准考证号\"))\r\n\r\n# 设置考试数据分析基础文件的文件\r\nfileAnalysisOutput = {1 : \"191215-6-分析结果.xlsx\", 2 : \"200112-6-分析结果.xlsx\"}\r\nexcelWriter = list()\r\nfor i in range(len(fileAnalysisOutput)) :\r\n    excelWriter.append(pd.ExcelWriter(fileAnalysisOutput[i + 1]))\r\n\r\n# 设置全局分析结果的文件\r\nfileAnalysisGlobal = \"7-分析结果.xlsx\"\r\nexcelWriterGlobal = pd.ExcelWriter(fileAnalysisGlobal)\r\n\r\n# 函数功能 - 统计每题目的正确率\r\ndef AnswerPercentage() :\r\n    # 是否输出Debug信息\r\n    isDebug = False\r\n\r\n    print(\"Program Info ->\", \"进入AnswerPercentage()函数 开始每题目正确率\", \"考试次数：\", len(fileAnalysisInput))\r\n    for iTest in range(len(fileAnalysisInput)) :\r\n        npSurvey = np.empty([0, 9])\r\n        for iLevel in ['初级', '中级', '高级'] :\r\n            if isDebug : print(\"Debug Info ->\", \"考试\", dateTest[iTest + 1], \"级别\", iLevel)\r\n            npTmp = np.empty([0, 9])\r\n            dfLevelTmp = dfAnalysisInput[iTest][dfAnalysisInput[iTest]['级别']==iLevel]\r\n            for i in range(1, 73) :\r\n                lCurrentAnswer = dfLevelTmp[\"答案\"+str(i)].unique()\r\n                if isDebug : print(\"Debug Info ->\", \"答案\"+str(i), lCurrentAnswer)\r\n                pA = pB = pC = pD = pE = pF = pN = pZ = 0\r\n                if isDebug : print(\"Debug Info ->\", dfLevelTmp[\"答案\" + str(i)].value_counts(dropna=False))\r\n                while len(lCurrentAnswer) > 0 :\r\n                    sCurrentAnswer = str(lCurrentAnswer[0])\r\n                    lCurrentAnswer = np.delete(lCurrentAnswer, 0)\r\n                    if sCurrentAnswer.strip() == \"A\" :\r\n                        pA += dfLevelTmp[\"答案\"+str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                    elif sCurrentAnswer.strip() == \"B\" :\r\n                        pB += dfLevelTmp[\"答案\" + str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                    elif sCurrentAnswer.strip() == \"C\" :\r\n                        pC += dfLevelTmp[\"答案\" + str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                    elif sCurrentAnswer.strip() == \"D\":\r\n                        pD += dfLevelTmp[\"答案\" + str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                    elif sCurrentAnswer.strip() == \"E\":\r\n                        pE += dfLevelTmp[\"答案\" + str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                    elif sCurrentAnswer.strip() == \"F\":\r\n                        pD += dfLevelTmp[\"答案\" + str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                    elif sCurrentAnswer.strip() == \"nan\" or sCurrentAnswer.strip() == \"\":\r\n                        pN += dfLevelTmp[\"答案\" + str(i)].isnull().sum() / len(dfLevelTmp) * 100\r\n                    else :\r\n                        pZ += dfLevelTmp[\"答案\" + str(i)].value_counts()[sCurrentAnswer] / len(dfLevelTmp) * 100\r\n                npTmp = np.append(npTmp, [[\"答案\" + str(i), round(pA, 1), round(pB, 1), round(pC, 1), round(pD, 1), round(pE, 1), round(pF, 1),\r\n                     round(pN, 1), round(pZ, 1)]], axis=0)\r\n            if isDebug : print(\"Debug Info ->\", npTmp)\r\n            dfTmp = pd.DataFrame(npTmp, columns=['题目', '选A', '选B', '选C', '选D', '选E', '选F', '选空', '其它'])\r\n            dfTmp = dfTmp.set_index('题目')\r\n            # 将DataFrame列表的当前项写入分析结果文件\r\n            if isDebug : print(\"Debug Info ->\", \"保存分析结果文件 考试\", dateTest[iTest], iLevel)\r\n            dfTmp.to_excel(excelWriter[iTest], sheet_name=iLevel+'正确率')\r\n\r\n    return 0\r\n\r\n# 函数功能 - 统计共有多少城市参加，并给出省份列表\r\ndef CityUnique() :\r\n    # 是否输出Debug信息\r\n    isDebug = False\r\n    # 城市与所属省份的对应关系\r\n    dictCity = {'北京':'北京'}\r\n\r\n    print(\"Program Info ->\", \"进入CityUnique()函数 开始统计参赛城市数据\", \"考试次数：\", len(fileAnalysisInput))\r\n\r\n    # 定义列表，存储每次考试数据的DataFrame\r\n    dfTmp = []\r\n    # 处理每次考试的数据\r\n    for iTest in range(len(fileAnalysisInput)) :\r\n        # 本次考试省份列表\r\n        arChengShi = dfAnalysisInput[iTest]['考点'].unique()\r\n        # 构建序列，存储本次考试情况\r\n        npTmp = np.empty([0, 3])\r\n        for i in range(len(arChengShi)) :\r\n            # 填写城市与所属省份的对应关系字典\r\n            dictCity[arChengShi[i]] = dfAnalysisInput[iTest][dfAnalysisInput[iTest]['考点']==arChengShi[i]].iloc[0]['省份']\r\n            # 将省份名称、城市名称、人数加入序列\r\n            npTmp = np.append(npTmp, [[dictCity[arChengShi[i]], arChengShi[i], int(dfAnalysisInput[iTest]['考点'].value_counts()[arChengShi[i]])]], axis=0)\r\n        if isDebug :\r\n            print(\"Debug Info ->\", \"考试\", iTest + 1, \"日期\", dateTest[iTest + 1])\r\n            print(npTmp)\r\n        # 将序列存入DataFrame列表\r\n        dfTmp.append(pd.DataFrame(npTmp, columns=['省份', '城市', '人数']))\r\n        dfTmp[iTest]['人数'] = dfTmp[iTest]['人数'].astype('int')\r\n        dfTmp[iTest] = dfTmp[iTest].set_index('城市')\r\n        dfTmp[iTest] = dfTmp[iTest].sort_values(by=\"省份\")\r\n        # 将DataFrame列表的当前项写入分析结果文件\r\n        dfTmp[iTest].to_excel(excelWriter[iTest], sheet_name='参加城市')\r\n\r\n    # 合并所有考试数据\r\n    # 将第一次考试的数据装入汇总表中\r\n    dfTotal = dfTmp[0]\r\n    # 将后继考试的数据装入汇总表中\r\n    for iTest in range(1, len(fileAnalysisInput)) :\r\n        dfTotal = pd.concat([dfTotal, dfTmp[iTest]], axis=1, sort=True)\r\n    # 将各次考试数据相加求和\r\n    dfTotal= pd.DataFrame(dfTotal.sum(axis=1))\r\n    dfTotal.index.name = '城市'\r\n    npTmp = np.empty([0, 1])\r\n    for i in range(len(dfTotal)) :\r\n        npTmp = np.append(npTmp, [dictCity[dfTotal.index[i]]])\r\n    dfTotal.insert(0, '省份', npTmp)\r\n    dfTotal.columns = ['省份', '人数']\r\n    dfTotal['人数'] = dfTotal['人数'].astype('int')\r\n    dfTotal = dfTotal.sort_values(by='省份')\r\n    if isDebug :\r\n        print(\"Debug Info ->\", \"合并后的数据\")\r\n        print(dfTotal)\r\n\r\n    # 写入分析结果文件\r\n    dfTotal.to_excel(excelWriterGlobal, sheet_name='参加城市')\r\n\r\n    return 0\r\n\r\n# 函数功能 - 统计共有多少省份参加，并给出省份列表\r\ndef ProvinceUnique() :\r\n    # 是否输出Debug信息\r\n    isDebug = False\r\n\r\n    print(\"Program Info ->\", \"进入ProvinceUnique()函数 开始统计参赛省份数据\", \"考试次数：\", len(fileAnalysisInput))\r\n\r\n    # 定义列表，存储每次考试数据的DataFrame\r\n    dfTmp = []\r\n    # 处理每次考试的数据\r\n    for iTest in range(len(fileAnalysisInput)) :\r\n        # 本次考试省份列表\r\n        arShengFen = dfAnalysisInput[iTest]['省份'].unique()\r\n        # 构建序列，存储本次考试情况\r\n        npTmp = np.empty([0, 2])\r\n        for i in range(len(arShengFen)) :\r\n            # 将省份名称、人数加入序列\r\n            npTmp = np.append(npTmp, [[arShengFen[i], int(dfAnalysisInput[iTest]['省份'].value_counts()[arShengFen[i]])]],\r\n                              axis=0)\r\n        if isDebug :\r\n            print(\"Debug Info ->\", \"考试\", iTest + 1, \"日期\", dateTest[iTest + 1])\r\n            print(npTmp)\r\n        # 将序列存入DataFrame列表\r\n        dfTmp.append(pd.DataFrame(npTmp, columns=['省份', '人数']))\r\n        dfTmp[iTest]['人数'] = dfTmp[iTest]['人数'].astype('int')\r\n        dfTmp[iTest] = dfTmp[iTest].set_index('省份')\r\n        # 将DataFrame列表的当前项写入分析结果文件\r\n        dfTmp[iTest].to_excel(excelWriter[iTest], sheet_name='参加省份')\r\n\r\n    # 合并所有考试数据\r\n    # 将第一次考试的数据装入汇总表中\r\n    dfTotal = dfTmp[0]\r\n    # 将后继考试的数据装入汇总表中\r\n    for iTest in range(1, len(fileAnalysisInput)) :\r\n        dfTotal = pd.concat([dfTotal, dfTmp[iTest]], axis=1, sort=True)\r\n    # 将各次考试数据相加求和\r\n    dfTotal = pd.DataFrame(dfTotal.sum(axis=1))\r\n    dfTotal.index.name = '省份'\r\n    dfTotal.columns = ['人数']\r\n    dfTotal['人数'] = dfTotal['人数'].astype('int')\r\n    if isDebug :\r\n        print(\"Debug Info ->\", \"合并后的数据\")\r\n        print(dfTotal)\r\n\r\n    # 写入分析结果文件\r\n    dfTotal.to_excel(excelWriterGlobal, sheet_name='参加省份')\r\n\r\n    return 0\r\n\r\n# 主程序开始-------------------------------------------------------------------------------------------------------------\r\n\r\n# 统计参加省份数据\r\nProvinceUnique()\r\n\r\n# 统计参加城市的数据\r\nCityUnique()\r\n\r\n# 统计每题目的正确率\r\nAnswerPercentage()\r\n\r\n# 关闭需要写入的excel文件\r\nprint(\"Program Info ->\", \"写入分析结果文件...\")\r\nfor iTest in range(len(fileAnalysisInput)) :\r\n    excelWriter[iTest].save()\r\n    excelWriter[iTest].close()\r\nexcelWriterGlobal.save()\r\nexcelWriterGlobal.close()\r\n\r\n# 主程序结束-------------------------------------------------------------------------------------------------------------\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DataAnalyzing200112.py	(revision 593f6b266aba9ad5a548ff599b48a8792dd267dd)
+++ DataAnalyzing200112.py	(date 1591239439670)
@@ -10,17 +10,17 @@
 from numpy.core._multiarray_umath import ndarray
 from pandas import DataFrame
 
-dateTest = {1 : "2019-12-15", 2 : "2020-01-12"}
+dateTest = {1 : "2020-5-30"}
 
 # 设置考试数据分析基础文件的文件名
-fileAnalysisInput = {1 : "191215-5-分析基础.xlsx", 2 : "200112-5-分析基础.xlsx"}
+fileAnalysisInput = {1 : "200530-5-分析基础.xlsx"}
 dfAnalysisInput = list()
 for i in range(len(fileAnalysisInput)) :
     print("Program Info ->", "考试序号", i, "考试日期", dateTest[i + 1], "文件名称", fileAnalysisInput[i + 1])
     dfAnalysisInput.append(pd.read_excel(fileAnalysisInput[i + 1], "分析基础", index_col="准考证号"))
 
 # 设置考试数据分析基础文件的文件
-fileAnalysisOutput = {1 : "191215-6-分析结果.xlsx", 2 : "200112-6-分析结果.xlsx"}
+fileAnalysisOutput = {1 : "200530-6-分析结果.xlsx"}
 excelWriter = list()
 for i in range(len(fileAnalysisOutput)) :
     excelWriter.append(pd.ExcelWriter(fileAnalysisOutput[i + 1]))
Index: .idea/STEMA_Analysis.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 (STEMA_Analysis)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/STEMA_Analysis.iml	(revision 593f6b266aba9ad5a548ff599b48a8792dd267dd)
+++ .idea/STEMA_Analysis.iml	(date 1591154209071)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8 (STEMA_Analysis)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/rGraphicsSettings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/rGraphicsSettings.xml	(date 1591386428851)
+++ .idea/rGraphicsSettings.xml	(date 1591386428851)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RGraphicsSettings">
+    <option name="height" value="1080" />
+    <option name="resolution" value="75" />
+    <option name="version" value="1" />
+    <option name="width" value="1920" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/rpackages.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/rpackages.xml	(date 1591386428871)
+++ .idea/rpackages.xml	(date 1591386428871)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RPackageService">
+    <option name="enabledRepositoryUrls">
+      <list>
+        <option value="@CRAN@" />
+      </list>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/rSettings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/rSettings.xml	(date 1591386428888)
+++ .idea/rSettings.xml	(date 1591386428888)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RSettings">
+    <option name="interpreterPath" value="C:\Program Files\R\R-3.6.1\bin\R.exe" />
+  </component>
+</project>
\ No newline at end of file
Index: GeoAnalysis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- GeoAnalysis.py	(date 1591492624910)
+++ GeoAnalysis.py	(date 1591492624910)
@@ -0,0 +1,63 @@
+# Analysis of geographical locations from processed data (分析基础)
+
+import pandas as pd
+from openpyxl import Workbook
+
+isDebug = False
+
+dfInput = pd.read_excel("200530-5-分析基础.xlsx")
+wbOutput = Workbook()
+
+wsProvince = wbOutput.active
+wsProvince.title = "省份分布"
+wsCity = wbOutput.create_sheet(title = "城市分布")
+
+lstProvinceRaw = dfInput["省份"]
+dictProvinceFreq = {}
+for i in lstProvinceRaw:
+    if i in dictProvinceFreq:
+        dictProvinceFreq[i] += 1
+    else:
+        dictProvinceFreq[i] = 1
+
+if isDebug == True:
+    print("Province Frequency Dictionary", dictProvinceFreq)
+
+wsProvince.cell(column = 1, row = 1, value = "省份")
+wsProvince.cell(column = 2, row = 1, value = "人数")
+tempRow = 2
+for i in dictProvinceFreq:
+    wsProvince.cell(column = 1, row = tempRow, value = i)
+    tempRow += 1
+tempRow = 2
+for i in dictProvinceFreq:
+    wsProvince.cell(column= 2, row = tempRow, value = dictProvinceFreq[i])
+    tempRow += 1
+
+
+lstCityRaw = dfInput["考点"]
+dictCityFreq = {}
+for i in lstCityRaw:
+    if i in dictCityFreq:
+        dictCityFreq[i] += 1
+    else:
+        dictCityFreq[i] = 1
+
+if isDebug == True:
+    print("City Frequency Dictionary", dictCityFreq)
+
+wsCity.cell(column = 1, row = 1, value = "城市")
+wsCity.cell(column = 2, row = 1, value = "人数")
+tempRow = 2
+for i in dictCityFreq:
+    wsCity.cell(column = 1, row = tempRow, value = i)
+    tempRow += 1
+tempRow = 2
+for i in dictCityFreq:
+    wsCity.cell(column= 2, row = tempRow, value = dictCityFreq[i])
+    tempRow += 1
+
+wbOutput.save(filename = "200530-0-省份与地区测试文件.xlsx")
+
+
+
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 (STEMA_Analysis)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 593f6b266aba9ad5a548ff599b48a8792dd267dd)
+++ .idea/misc.xml	(date 1591154209092)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (STEMA_Analysis)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
